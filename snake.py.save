from turtle import *
from random import randrange
from freegames import square, vector

food = vector(0, 0)
snake = [vector(10, 0)]
aim = vector(10, 0)
speed = 120          # ms entre frames (menor = más rápido)
score = 0
best = 0

pen = Turtle(visible=False)
pen.up(); pen.goto(-200, 190)

def change(x, y):
    if (aim.x, aim.y) != (-x, -y):  # evita reversa inmediata
        aim.x, aim.y = x, y

def inside(p):
    return -200 < p.x < 190 and -200 < p.y < 190

def place_food():
    food.x = randrange(-19, 19) * 10
    food.y = randrange(-19, 19) * 10

def draw_hud():
    pen.clear()
    pen.write(f"Score: {score}  Best: {best}", font=("Arial", 12, "normal"))

def move():
    global speed, score, best
    head = snake[-1].copy()
    head.move(aim)

    if not inside(head) or head in snake:
        square(head.x, head.y, 9, 'red')
        update()
        return

    snake.append(head)

    if head == food:
        score += 1
        best = max(best, score)
        place_food()
        if score % 5 == 0 and speed > 40:
            speed -= 10
    else:
        snake.pop(0)

    clear()
    for body in snake:
        square(body.x, body.y, 9, 'green')
    square(food.x, food.y, 9, 'red')
    draw_hud()
    update()
    ontimer(move, speed)

def start():
    global speed, score
    speed, score = 120, 0
    snake[:] = [vector(10, 0)]
    aim.x, aim.y = 10, 0
    place_food()
    draw_hud()
    move()

setup(420, 420, 0, 0)
hideturtle(); tracer(False); listen()
onkey(lambda: change(10, 0), 'Right')
onkey(lambda: change(-10, 0), 'Left')
onkey(lambda: change(0, 10), 'Up')
onkey(lambda: change(0, -10), 'Down')
onkey(start, 'r')  # reiniciar con R
start()
done()
python3 snake.py


def change(x, y):
    """Change snake direction."""
    aim.x = x
    aim.y = y


def inside(head):
    """Return True if head inside boundaries."""
    return -200 < head.x < 190 and -200 < head.y < 190


def move():
    """Move snake forward one segment."""
    head = snake[-1].copy()
    head.move(aim)

    if not inside(head) or head in snake:
        square(head.x, head.y, 9, 'red')
        update()
        return

    snake.append(head)

    if head == food:
        print('Snake:', len(snake))
        food.x = randrange(-15, 15) * 10
        food.y = randrange(-15, 15) * 10
    else:
        snake.pop(0)

    clear()

    for body in snake:
        square(body.x, body.y, 9, 'black')

    square(food.x, food.y, 9, 'green')
    update()
    ontimer(move, 100)


setup(420, 420, 370, 0)
hideturtle()
tracer(False)
listen()
onkey(lambda: change(10, 0), 'Right')
onkey(lambda: change(-10, 0), 'Left')
onkey(lambda: change(0, 10), 'Up')
onkey(lambda: change(0, -10), 'Down')
move()
done()
